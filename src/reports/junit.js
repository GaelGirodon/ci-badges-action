import * as core from '@actions/core';
import { XMLParser } from 'fast-xml-parser';
import fs from 'node:fs/promises';
import { join } from 'node:path';
import { globNearest } from '../util/index.js';

/**
 * Load test reports using JUnit format.
 * @param {string} root Root search directory
 * @returns {Promise<Omit<TestReport, 'format'>[]>} JUnit test report
 */
export async function getReports(root) {
  core.info('Load JUnit test report');
  const patterns = [
    join(root, '**/TEST-*.xml'),
    join(root, '**/report.xml'),
    join(root, '**/*test*.xml'),
    join(root, '**/*junit*.xml')
  ];
  const files = await globNearest(patterns);
  const data = { tests: 0, passed: 0, failed: 0, skipped: 0 };
  let count = 0;
  for (const f of files) {
    core.info(`Load JUnit report file '${f}'`);
    const counters = await parseJUnitReport(f);
    if (!counters) {
      core.info('File is not a valid JUnit report');
      continue; // Invalid report file, trying the next one
    }
    Object.keys(counters).forEach(k => data[k] += counters[k]);
    core.info(`Loaded JUnit report file: ${JSON.stringify(counters)}`);
    count++;
  }
  data.passed = data.tests - (data.failed + data.skipped);
  const reports = count > 0 ? [{ type: 'tests', data }] : [];
  core.info(`Loaded ${reports.length} JUnit report(s): ${JSON.stringify(reports)}`);
  return reports;
}

/**
 * Try to extract the number of tests (total, failed and skipped)
 * from the given report file.
 * @param {string} path Path to the JUnit test report file
 * @returns {Promise<{ tests: number, failed: number, skipped: number }|null>}
 */
async function parseJUnitReport(path) {
  const contents = await fs.readFile(path, { encoding: 'utf8' });
  if (!contents.includes('<testsuite')) return null;
  const parser = new XMLParser({
    ignoreAttributes: false,
    ignoreDeclaration: true,
    isArray: name => name === 'testsuite' || name === 'testcase',
    processEntities: false,
    removeNSPrefix: true
  });
  const report = parser.parse(contents);
  return parseTestSuitesTag(report)
    ?? parseTestSuite(report['testsuites'] ?? report);
}

/**
 * Extract the number of tests (total, failed and skipped) from the attributes
 * of the root `<testsuites>` opening tag, if the tag with these attributes exists.
 * This is simpler than browsing all test cases, and this is the only way to get
 * the number of skipped tests from a report generated by `mocha-junit-reporter`
 * (skipped tests are not written as `<testcase>` tags at all).
 * @param report Deserialized JUnit test report
 * @returns {{ tests: number, failed: number, skipped: number }|null}
 */
function parseTestSuitesTag(report) {
  const ts = report?.['testsuites'];
  if (!ts || !ts["@_tests"]) return null;
  const counters = {
    tests: parseInt(ts["@_tests"] || "-1"),
    failed: parseInt(ts["@_failures"] || "-1") + parseInt(ts["@_errors"] || "0"),
    skipped: parseInt(ts["@_skipped"] || "-1")
  };
  return Object.values(counters).some(v => v < 0) ? null : counters;
}

/**
 * Compute the number of tests (total, failed and skipped) by counting and looking
 * at the type of test cases in the given `<testsuite>` tag, recursively.
 * This should at least handles reports generated with Maven Surefire (and similar ones),
 * as well as reports generated by the Node.js test runner (where `<testsuite>` tags can
 * be nested within other ones, and they have in their attributes the number of direct
 * `<testcase>` and `<testsuite>` children, instead of the total (recursively) number of
 * `<testcase>` children, hence the need to count all test cases by ourselves).
 * @param testSuite A test suite containing test cases (and possibly other test suites)
 * @returns {{ tests: number, failed: number, skipped: number }}
 */
function parseTestSuite(testSuite) {
  const counters = { tests: 0, failed: 0, skipped: 0 };
  for (let nestedTestSuite of testSuite['testsuite'] ?? []) {
    const nestedCounters = parseTestSuite(nestedTestSuite);
    Object.keys(nestedCounters).forEach(k => counters[k] += nestedCounters[k]);
  }
  for (let testCase of testSuite['testcase'] ?? []) {
    counters.tests += 1;
    if (testCase['failure']) counters.failed++;
    if (testCase['error']) counters.failed++;
    if (testCase['skipped']) counters.skipped++;
  }
  return counters;
}
